import {
    FETCH_PHONES_START,
    FETCH_PHONES_SUCCESS,
    FETCH_PHONES_FAILURE,
    LOAD_MORE_PHONES_FAILURE,
    LOAD_MORE_PHONES_SUCCESS,
    LOAD_MORE_PHONES_START,
    FETCH_PHONES_BY_ID_FAILURE,
    FETCH_PHONES_BY_ID_START,
    FETCH_PHONES_BY_ID_SUCCESS,
    ADD_PHONE_TO_BASKET,
    SEARCH_PHONE,
    FETCH_CATEGORIES_FAILURE,
    FETCH_CATEGORIES_SUCCESS,
    FETCH_CATEGORIES_START,
    REMOVE_FROM_PHONE_BASKET,
    CLEAN_BASKET,
    DEL_PHONE_TO_BASKET
} from 'actionTypes'

// import * as R from 'ramda'

import {
    fetchPhones as fetchPhonesApi,
    loadMorePhones as loadMorePhonesApi,
    fetchPhonesById as fetchPhonesByIdApi,
    fetchCategories as fetchCategoriesApi

} from 'api'
import { getRenderedPhonesLength } from 'selectors'

export const fetchPhones = () => async dispatch => {
    dispatch({ type: FETCH_PHONES_START })

    try {
        const phones = await fetchPhonesApi()
        dispatch({
            type: FETCH_PHONES_SUCCESS,
            payload: phones
        })
    } catch (err) {
        dispatch({
            type: FETCH_PHONES_FAILURE,
            payload: err,
            error: true
        })
    }
}

export const loadMorePhones = () => async (dispatch, getState) => {

    const offset = getRenderedPhonesLength(getState())

    console.log('offset', offset)

    dispatch({ type: LOAD_MORE_PHONES_START })

    try {
        const phones = await loadMorePhonesApi({ offset })

        dispatch({
            type: LOAD_MORE_PHONES_SUCCESS,
            payload: phones,
            offset: offset
        })
    } catch (err) {
        dispatch({
            type: LOAD_MORE_PHONES_FAILURE,
            payload: err,
            error: true
        })
    }
}

export const fetchPhonesById = id => async dispatch => {
    dispatch({ type: FETCH_PHONES_BY_ID_START })

    try {
        const phone = await fetchPhonesByIdApi(id)
        dispatch({
            type: FETCH_PHONES_BY_ID_SUCCESS,
            payload: phone
        })
    } catch (err) {
        dispatch({
            type: FETCH_PHONES_BY_ID_FAILURE,
            payload: err,
            error: true
        })
    }
}

export const addPhoneToBasket = id => (dispatch) => {

    dispatch({
        type: ADD_PHONE_TO_BASKET,
        payload: id

    })
}

export const delPhoneToBasket = id => (dispatch, getState) => {
    const { basket } = getState()
    dispatch({
        type: DEL_PHONE_TO_BASKET,
        payload: basket,
        id: id
    })
}



export const searchPhone = text => dispatch => {
    dispatch({
        type: SEARCH_PHONE,
        payload: text
    })
}

export const fetchCategories = () => async dispatch => {
    dispatch({ type: FETCH_CATEGORIES_START })

    try {
        const categories = await fetchCategoriesApi()
        dispatch({
            type: FETCH_CATEGORIES_SUCCESS,
            payload: categories
        })
    } catch (err) {
        dispatch({
            type: FETCH_CATEGORIES_FAILURE,
            payload: err,
            error: true
        })
    }
}


export const removePhoneFromBasket = id => dispatch => {
    dispatch({
        type: REMOVE_FROM_PHONE_BASKET,
        payload: id
    })
}

export const cleanBasket = () => dispatch => {
    dispatch({
        type: CLEAN_BASKET,

    })
}

export const basketCheckout = phones => () => {
    alert(JSON.stringify(phones))
}

